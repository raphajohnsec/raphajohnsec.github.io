<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Security Blog</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2022-06-14T00:00:00+02:00</updated><subtitle>Content is my own</subtitle><entry><title>Clone from Github using SSH and a corporate proxy</title><link href="/clone-from-github-using-ssh-and-a-corporate-proxy.html" rel="alternate"></link><published>2022-06-14T00:00:00+02:00</published><updated>2022-06-14T00:00:00+02:00</updated><author><name>raphajohnsec</name></author><id>tag:None,2022-06-14:/clone-from-github-using-ssh-and-a-corporate-proxy.html</id><summary type="html">&lt;p&gt;How to clone a Github Repository using SSH behind a corporate Proxy&lt;/p&gt;</summary><content type="html">&lt;p&gt;So this is my very first useful post on this blog. You might already know this blog uses Pelican as base and is hosted on Github.
To modify and add new content to the page I can either edit thing an Github itself and commit directly. But when I want to edit multiple files it's easier to edit all needed files and commit those and at the end push to Github.
Github removed the password authentication, now stating&lt;/p&gt;
&lt;p&gt;"Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.".&lt;/p&gt;
&lt;p&gt;To clone my source repository I use the SSH option with a private key instead. But how to specify which key the git clone command should use?&lt;/p&gt;
&lt;p&gt;Following the reply from here https://stackoverflow.com/questions/6688655/select-private-key-to-use-with-git, I specified the core.sshCommand option. This might have worked when I am not behind a corporate Proxy...&lt;/p&gt;
&lt;p&gt;But with this option to specify own SSH commands, we can also add ProxyCommand. This leads to the following command to clone the Github repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone git@github.com:&amp;lt;REPO_USER&amp;gt;/&amp;lt;REPO_NAME&amp;gt;.git --config core.sshCommand&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ssh -i &amp;lt;~/.ssh/PRIVATE_KEY&amp;gt; -o &amp;#39;ProxyCommand=corkscrew &amp;lt;PROXY_IP&amp;gt; &amp;lt;PROXY_PORT&amp;gt; %h %p&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>A Pelican GH Action Deploy Demo</title><link href="/a-pelican-gh-action-deploy-demo.html" rel="alternate"></link><published>2019-06-22T00:00:00+02:00</published><updated>2019-06-22T00:00:00+02:00</updated><author><name>raphajohnsec</name></author><id>tag:None,2019-06-22:/a-pelican-gh-action-deploy-demo.html</id><content type="html">&lt;p&gt;This is a minimal repository for generating a static-site using Pelican, Pipenv, and with a deployment on Github pages.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>My First Review</title><link href="/my-first-review.html" rel="alternate"></link><published>2010-12-03T10:20:00+01:00</published><updated>2010-12-03T10:20:00+01:00</updated><author><name>raphajohnsec</name></author><id>tag:None,2010-12-03:/my-first-review.html</id><content type="html">&lt;p&gt;Following is a review of my favorite mechanical keyboard.&lt;/p&gt;</content><category term="Review"></category></entry><entry><title>[Encrypted content ahead] That one time I robbed a bank</title><link href="/that-one-time-i-robbed-a-bank.html" rel="alternate"></link><published>1983-04-22T00:00:00+02:00</published><updated>1983-04-22T00:00:00+02:00</updated><author><name>raphajohnsec</name></author><id>tag:None,1983-04-22:/that-one-time-i-robbed-a-bank.html</id><summary type="html">&lt;div id="pec-encrypted-content" style="display:none"&gt;oFckCS3OHtTU8xYKyV9OUA==;e3+xbPGiOPQLIjQaof72dqOu47MXGzPwAkwT5ELV8gE+dcFwIlpQlLFlvoSz40z5VakP/kHeJfB3WVSuDT8m+pBgTgFyxlFM7M2kQ6v07ZObxrh5+/kX5yQ6T0S6oh2a;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
    &lt;h4&gt;&lt;i&gt;This content is encrypted. Click on "Continue Reading" to activate the password field.&lt;/i&gt;&lt;/h4&gt;
&lt;/div&gt;

&lt;form id="pec-decrypt-form"&gt;
    &lt;label for="pec-content-password"&gt;Password&lt;/label&gt;
    &lt;input type="password" id="pec-content-password" placeholder="Password" /&gt;
    &lt;button type="button" id="pec-decrypt-content"&gt;Decrypt&lt;/button&gt;
&lt;/form&gt;


&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content …&lt;/script&gt;</summary><content type="html">&lt;div id="pec-encrypted-content" style="display:none"&gt;oFckCS3OHtTU8xYKyV9OUA==;e3+xbPGiOPQLIjQaof72dqOu47MXGzPwAkwT5ELV8gE+dcFwIlpQlLFlvoSz40z5VakP/kHeJfB3WVSuDT8m+pBgTgFyxlFM7M2kQ6v07ZObxrh5+/kX5yQ6T0S6oh2a;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
    &lt;h4&gt;&lt;i&gt;This content is encrypted. Click on "Continue Reading" to activate the password field.&lt;/i&gt;&lt;/h4&gt;
&lt;/div&gt;

&lt;form id="pec-decrypt-form"&gt;
    &lt;label for="pec-content-password"&gt;Password&lt;/label&gt;
    &lt;input type="password" id="pec-content-password" placeholder="Password" /&gt;
    &lt;button type="button" id="pec-decrypt-content"&gt;Decrypt&lt;/button&gt;
&lt;/form&gt;


&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i - 1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, { iv: iv, padding: CryptoJS.pad.NoPadding });

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };


        document.addEventListener('DOMContentLoaded', function () {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            var decrypt_document = function (event) {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
                event.preventDefault();
                return false;
            }
            
            decrypt_btn.addEventListener('click', decrypt_document);
            decrypt_form.addEventListener('submit', decrypt_document);
        });
    })();
&lt;/script&gt;</content><category term="articles"></category><category term="crime"></category><category term="banks"></category><category term="imabadass"></category></entry></feed>